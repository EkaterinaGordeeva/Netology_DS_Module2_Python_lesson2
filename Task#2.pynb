#Задание 1 
#объявление спиcка 
geo_logs = [ 
{'visit1': ['Москва', 'Россия']}, 
{'visit2': ['Дели', 'Индия']}, 
{'visit3': ['Владимир', 'Россия']}, 
{'visit4': ['Лиссабон', 'Португалия']}, 
{'visit5': ['Париж', 'Франция']}, 
{'visit6': ['Лиссабон', 'Португалия']}, 
{'visit7': ['Тула', 'Россия']}, 
{'visit8': ['Тула', 'Россия']}, 
{'visit9': ['Курск', 'Россия']}, 
{'visit10': ['Архангельск', 'Россия']}, 
] 
for i in range(len(geo_logs)): 
	for keys in geo_logs[i].keys(): 
		if geo_logs[i][keys][1]=='Россия': print(geo_logs[i]) 
		#или может быть вот такой вариант, но выводятся пустные списки, не придумала,как от них избавиться простым методом.
		#print([x for x in geo_logs[i].items() if geo_logs[i][keys][1]=='Россия']) 


#Задание 2 
ids = {'user1': [213, 213, 213, 15, 213], 'user2': [54, 54, 119, 119, 119], 'user3': [213, 98, 98, 35]} 
new=[] 
for keys in ids.keys(): 
	new=new+ids[keys] 
print(list(set(new))) 


#Задание 3 
#объявление спиcка 
queries = [ 
'смотреть сериалы онлайн', 
'новости спорта', 
'афиша кино', 
'курс доллара', 
'сериалы этим летом', 
'курс по питону', 
'сериалы про спорт', 
] 
new=[] 
length=[] 
#разделение слов в элементах списка 
for i in range(len(queries)): 
	new=new+[queries[i].split(' ')] 
#подсчет количества слов в каждом элементе списка 
for i in range(len(new)): 
	length=length+[len(new[i])] 
#выделение уникальных значений количества слов в каждом запросе 
unic=list(set(length)) 
#подсчет процентного соотношения количества слов в запросе(решила не сохранять в список, а просто вывести значения на экран) 
for i in range(len(unic)): 
	print('Поисковый запрос из ',unic[i], 'слов = ',float('{:.2f}'.format(length.count(unic[i])/len(length)*100)),'%') 



#Задание 4 
#объявление спиcка 
stats = {'facebook': 55, 'yandex': 120, 'vk': 115, 'google': 99, 'email': 42, 'ok': 98} 
max_val=max(stats.values()) 
stats_max={k:v for k,v in stats.items() if v==max_val} 
print(stats_max.keys()) 

#Задание 5 
#объявление спиcка 
stream = [
'2018-01-01,user1,3',
'2018-01-07,user1,4',
'2018-03-29,user1,1',
'2018-04-04,user1,13',
'2018-01-05,user2,7',
'2018-06-14,user3,4',
'2018-07-02,user3,10',
'2018-03-21,user4,19',
'2018-03-22,user4,4',
'2018-04-22,user4,8',
'2018-05-03,user4,9',
'2018-05-11,user4,11',
]
stats=[]
logs={}
for line in stream:
    stats=line.split(',')
    logs.setdefault(stats[1],0) 
    logs[stats[1]] += int(stats[2])
average=sum(logs.values())/len(logs.keys())
average

#Задание 6
#объявление спиcка  
stats = [ 
['2018-01-01', 'google', 25], 
['2018-01-01', 'yandex', 65], 
['2018-01-01', 'market', 89], 
['2018-01-02', 'google', 574], 
['2018-01-02', 'yandex', 249], 
['2018-01-02', 'market', 994], 
['2018-01-03', 'google', 1843], 
['2018-01-03', 'yandex', 1327], 
['2018-01-03', 'market', 1764], 
] 
#функция поиска значения по двум вводынм 
def search(date, company): 
	for i in range(len(stats)): 
		if (stats[i][0]==date and stats[i][1]==company): print(stats[i][2]) 
	#или такой вариант
	#print([line for line in stats if (line[0]==date and line[1]==company)])
print('Введите дату в формате ГГГГ-ММ-ДД') 
date=input() 
print('Введите название компании') 
company=input() 
#можно было бы ввести две переменные сразу через запятую, записать их в список, а потом избавиться от запятой, а в передавать значения не по отдельности, а одним списком. Даже не знаю, какой вариант лучше.
search(date, company) 


#Бонусное задание
#объявление спиcка  
stats = [ 
['2018-01-01', 'google', 25], 
['2018-01-01', 'yandex', 65], 
['2018-01-01', 'market', 89], 
['2018-01-02', 'google', 574],
['2018-01-02', 'yandex', 249], 
['2018-01-02', 'market', 994], 
['2018-01-03', 'google', 1843], 
['2018-01-03', 'yandex', 1327], 
['2018-01-03', 'market', 1764], 
] 

def search(val):
    for line in stats:
        length=len(line)
	#сравнение списка признаков со списком введенных признаков
        print([x[length-1] for x in line if line[:(len(line)-1)]==val[0:]])
#ввод признаков через запятую.
val=(input()).split(',')
search(val)